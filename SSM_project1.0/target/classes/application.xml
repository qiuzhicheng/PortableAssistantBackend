<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xsi:schemaLocation="    
           http://www.springframework.org/schema/beans    
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
           http://www.springframework.org/schema/aop    
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
           http://www.springframework.org/schema/context    
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">  
       
     <!-- 引入jdbc配置文件 -->
     <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
     		<property name="locations">
     			<list>
     				<value>classpath:properties/*.properties</value>
     				<!-- 要是有多个配置文件，只需在这里继续添加即可   -->
     			</list>
     		</property>
     </bean>
      <!-- 配置数据源 -->  
    <bean id="dataSource"  
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
        <!-- 不使用properties来配置 -->  
        <!-- property name="driverClassName" value="com.mysql.jdbc.Driver" />   
            <property name="url" value="jdbc:mysql://localhost:3306/learning" />   
            <property name="username" value="root" />   
            <property name="password" value="root" />   -->
      <!--  使用properties来配置  --> 
        <property name="driverClassName">  
            <value>${jdbc.driver}</value>  
        </property>  
        <property name="url">  
            <value>${jdbc.url}</value>  
        </property>  
        <property name="username">  
            <value>${jdbc.username}</value>  
        </property>  
        <property name="password">  
            <value>${jdbc.password}</value>  
        </property>  
    </bean>  
     <!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->  
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 	<property name="basePackage"  
            value="com.codejstudio.dao" />
	 </bean>
	 <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置
	            注意：
			classpath 和 classpath* 区别：
			classpath：只会到你的class路径中查找找文件;
			classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找够深入的吧
			*：通配符表示所有文件；
			**：表示所有目录下；
  		 --> 
   	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath*:com/codejstudio/mapper/**/*.xml"/>
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
	</bean>

    <!-- 自动扫描注解的bean -->  
    <context:component-scan base-package="com.codejstudio.service" />  
</beans>






