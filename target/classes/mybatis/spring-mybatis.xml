<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx
                     	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

<!-- 	<context:component-scan base-package="com.ge.cloud" /> -->
	
	 <!-- 自动扫描注解 -->  
	<context:component-scan base-package="com.codejstudio.service">  
      	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />   
 	</context:component-scan>  
	<!-- 启动事物管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 对@Transactional这个注解进行的驱动 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
<!-- 引入jdbc配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:properties/jdbc.properties" />
	</bean>
<!-- 配置数据源 -->  
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url"
			value="${url}?characterEncoding=UTF-8&amp;useUnicode=true" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="initialSize" value="${initialSize}"></property>
		<property name="maxActive" value="${maxActive}"></property>
		<property name="maxIdle" value="${maxIdle}"></property>
		<property name="minIdle" value="${minIdle}"></property>
		<property name="maxWait" value="${maxWait}"></property>
	</bean>

 <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置
	            注意：
			classpath 和 classpath* 区别：
			classpath：只会到你的class路径中查找找文件;
			classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找够深入的吧
			*：通配符表示所有文件；
			**：表示所有目录下；
  		 --> 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />

		<property name="mapperLocations"
			value="classpath:com/codejstudio/service/mapper/*.xml" />
			<!--自定义类型转换-->
		<property name="typeAliasesPackage"
			value="com.codejstudio.service.dto,com.codejstudio.service.util" />
		<!-- <typeAliases> example:@Alias(user) <package name="com.dy.entity"/> 
			<typeAlias alias="UserEntity" type="com.test.entity.User"/> </typeAliases> -->
			<!-- 将结果集数据转换为JSONObject对象 -->
		<property name="typeHandlersPackage"
			value="com.codejstudio.service.typehandler" />
	</bean>

     <!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->  
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.codejstudio.service.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	



</beans>